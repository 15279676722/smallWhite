<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.example.smallwhite.mybatis.dao.BabyimageDao">    <!--    <cache></cache>-->    <cache-ref namespace="com.example.smallwhite.mybatis.dao.BabyimageDao"/>    <resultMap type="com.example.smallwhite.mybatis.entity.Babyimage" id="BabyimageMap">        <result property="id" column="id" jdbcType="VARCHAR"/>        <result property="name" column="name" jdbcType="VARCHAR"/>        <result property="url" column="url" jdbcType="VARCHAR"/>        <result property="ts" column="ts" jdbcType="TIMESTAMP"/>        <result property="babyid" column="babyid" jdbcType="VARCHAR" />    </resultMap>    <!--查询单个-->    <select id="queryByParentId" resultMap="BabyimageMap">        select id,               name,               url,               ts        from babysrj.babyimage        where babyid = #{parent_id}    </select>    <!--查询单个-->    <select id="queryById" resultMap="BabyimageMap">        select id,               name,               url,               ts        from babysrj.babyimage        where id = #{id}    </select>    <!--查询指定行数据-->    <select id="queryAllByLimit" resultMap="BabyimageMap">        select id,               name,               url,               ts        from babysrj.babyimage        limit #{offset}, #{limit}    </select>    <!--通过实体作为筛选条件查询-->    <select id="queryAll" resultMap="BabyimageMap">        select        id, name, url, ts        from babysrj.babyimage        <where>            <if test="id != null and id != ''">                and id = #{id}            </if>            <if test="name != null and name != ''">                and name = #{name}            </if>            <if test="url != null and url != ''">                and url = #{url}            </if>            <if test="ts != null">                and ts = #{ts}            </if>        </where>    </select>    <!--新增所有列-->    <insert id="insert" keyProperty="id" >        insert into babysrj.babyimage(id,name, url, ts,babyid)        values (#{id},#{name}, #{url}, #{ts},#{babyid})    </insert>    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">        insert into babysrj.babyimage(name, url, ts)        values        <foreach collection="entities" item="entity" separator=",">            (#{entity.name}, #{entity.url}, #{entity.ts})        </foreach>    </insert>    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">        insert into babysrj.babyimage(name, url, ts)        values        <!--foreach标签 遍历作用 把一个数据进行遍历        open：整个循环内容开头的字符串。        close：整个循环内容结尾的字符串。        separator：每次循环的分隔符。        item：从迭代对象中取出的每一个值。        index：如果参数为集合或者数组，该值为当前索引值，如果参数为Map类型时，该值为Map的key。        collection：要迭代循环的属性名。        -->        <foreach collection="entities" item="entity" separator=",">            (#{entity.name}, #{entity.url}, #{entity.ts})        </foreach>        on duplicate key update        name = values(name) , url = values(url) , ts = values(ts)    </insert>    <!--通过主键修改数据-->    <update id="update">        update babysrj.babyimage        <!--set 标签给update 语句后添加上 set 删除掉最后一个字段的后缀,-->        <!-- trim标签也是一个类似的替换型的标签 功能更强大 不过日常使用比较少-->        <set>            <if test="name != null and name != ''">                name = #{name},            </if>            <if test="url != null and url != ''">                url = #{url},            </if>            <if test="ts != null">                ts = #{ts},            </if>        </set>        where id = #{id}    </update>    <!--通过主键删除-->    <delete id="deleteById">        delete        from babysrj.babyimage        where id = #{id}    </delete>    <select id="selectLikeName1" resultMap="BabyimageMap">        select *        from babysrj.babyimage        where name like '%${name}%'    </select>    <select id="selectLikeName2" resultMap="BabyimageMap">        select *        from babysrj.babyimage        where name like "%"#{name}"%"    </select>    <select id="selectLikeName3" resultMap="BabyimageMap">        select *        from babysrj.babyimage        where name like concat('%',#{name},'%')    </select>    <select id="selectLikeName4" resultMap="BabyimageMap">        select *        from babysrj.babyimage        where name like #{name}    </select>    <select id="selectLikeName5" resultMap="BabyimageMap">        <bind name="likeName" value="'%'+name+'%'"/>        select *        from babysrj.babyimage        where name like #{likeName}    </select>    <select id="qq">        select * from babyimage        <!-- where 标签 给第一个满足条件的if前缀的and改成 where 拼接正确的sql -->        <where>            <!--if 标签判断是否满足条件-->            <if test="id != null and id !=''">                and id = #{id}            </if>            <if test="name != null and name !=''">                and name = #{name}            </if>        </where>        <where>            <!-- choose 标签 类似于java的 switch choose 满足when标签中的条件时执行when标签中的sql 都不满足时执行 otherwise 标签中的sql语句-->            <choose>                <when test="url != null and url !=''">                    and url = #{url}                </when>                <when test="babyid != null and babyid !=''">                    and babyid = #{babyid}                </when>                <otherwise>                </otherwise>            </choose>        </where>        <!-- bind 标签 把 vo中name字段的值进行拼接为%name%的形式 一般在用于模糊查询的时候 有用到-->        <bind name="paran_uname" value="'%' + name + '%'"/>    </select></mapper>