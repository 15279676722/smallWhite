package com.example.smallwhite.leetcode.june.solution.v1;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit;/** * 给你一个整数数组 nums 和一个整数 target 。 * <p> * 向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ： * <p> * 例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。 * 返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目 * <p> * [1,1,31,18,39,33,33,15,36,50,8,47,21,29,24,39,23,44,22,33] * 11 * * @author: yangqiang * @create: 2021-06-07 13:44 */public class Solution {    public static void main(String[] args) {        long start = System.currentTimeMillis();        int targetSumWays = findTargetSumWays(new int[]{11,20,19,3,25,7,30,45,8,11,35,19,29,9,49,14,22,34,12,0}, 34);        System.out.println(targetSumWays);        long end = System.currentTimeMillis();        System.out.println("耗时"+(end-start));    }    public static int findTargetSumWays(int[] nums, int target) {        List<Integer> list = new ArrayList<>(new Double(Math.pow(2, nums.length)).intValue());        for (int num : nums) {            List<Integer> listCopy = new ArrayList<>(list);            if (list.size() == 0) {                list.add(num);                list.add(-num);                continue;            }            list.clear();            for (Integer item : listCopy) {                list.add(item + num);                list.add(item - num);            }        }        int count = (int) list.stream().filter(item -> item == target).count();        return count;    }}