package com.example.smallwhite.leetcode.june.solution.v2;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;/** * 给你一个整数数组 nums 和一个整数 target 。 * <p> * 向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ： * <p> * 例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。 * 返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目 * <p> * [1,1,31,18,39,33,33,15,36,50,8,47,21,29,24,39,23,44,22,33] * 11 * * * [0,0,0,0,0,0,0,0,1] * 1 * * [11,20,19,3,25,7,30,45,8,11,35,19,29,9,49,14,22,34,12,0] * 34 * @author: yangqiang * @create: 2021-06-07 13:44 */public class Solution {    public static void main(String[] args) {        long start = System.currentTimeMillis();//        int targetSumWays = findTargetSumWays(new int[]{1, 1, 31, 18, 39, 33, 33, 15, 36, 50, 8, 47, 21, 29, 24, 39, 23, 44, 22, 33}, 11);        int targetSumWays = findTargetSumWays(new int[]{11,20,19,3,25,7,30,45,8,11,35,19,29,9,49,14,22,34,12,0}, 34);        System.out.println(targetSumWays);        System.out.println(System.currentTimeMillis()-start);    }    public static int findTargetSumWays(int[] nums, int target) {        Map<Integer, Integer> map = new LinkedHashMap<>(new Double(Math.pow(2, nums.length)).intValue());        for (int num : nums) {            Map<Integer, Integer> mapCopy = new LinkedHashMap<>(map);            if (map.size() == 0) {                if(num == 0 ){                    map.put(num, 2);                }else{                    map.put(num, 1);                    map.put(-num, 1);                }                continue;            }            map.clear();            for(Integer key:mapCopy.keySet()){                Integer value = mapCopy.get(key);                if (map.containsKey(key + num)) {                    map.put(key + num, value + map.get(key + num));                } else{                    map.put(key + num, value);                }                if (map.containsKey(key - num)) {                    map.put(key - num, value + map.get(key - num));                } else {                    map.put(key - num, value);                }            }        }        return map.getOrDefault(target, 0);    }}