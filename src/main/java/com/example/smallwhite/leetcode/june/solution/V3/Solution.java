package com.example.smallwhite.leetcode.june.solution.V3;/** * 494 * 输入: nums: [1, 1, 1, 1, 1], S: 3 * 输出: 5 * 解释: * -1+1+1+1+1 = 3 * +1-1+1+1+1 = 3 * +1+1-1+1+1 = 3 * +1+1+1-1+1 = 3 * +1+1+1+1-1 = 3 * * sum(P) 前面符号为+的集合；sum(N) 前面符号为减号的集合 * 所以题目可以转化为 * sum(P) - sum(N) = target * => sum(nums) + sum(P) - sum(N) = target + sum(nums) * => 2 * sum(P) = target + sum(nums) * => sum(P) = (target + sum(nums)) / 2 * 因此题目转化为01背包，也就是能组合成容量为sum(P)的方式有多少种 * @author: yangqiang * @create: 2021-06-07 20:22 */public class Solution {    public static void main(String[] args) {        long start = System.currentTimeMillis();//        int targetSumWays = findTargetSumWays(new int[]{1, 1, 31, 18, 39, 33, 33, 15, 36, 50, 8, 47, 21, 29, 24, 39, 23, 44, 22, 33}, 11);        int targetSumWays = findTargetSumWays(new int[]{11,20,19,3,25,7,30,45,8,11,35,19,29,9,49,14,22,34,12,0}, 34);        System.out.println(targetSumWays);        System.out.println(System.currentTimeMillis()-start);    }    public static int findTargetSumWays(int[] nums, int s) {        int sum = 0;        for (int num : nums) {            sum += num;        }        if (sum < s || (sum + s) % 2 == 1) {            return 0;        }        int w = (sum + s) / 2;        int[] dp = new int[w + 1];        dp[0] = 1;        for (int num : nums) {            for (int j = w; j >= num; j--) {                dp[j] += dp[j - num];            }        }        return dp[w];    }}