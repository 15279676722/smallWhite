package com.example.smallwhite.designpatterns.absfactorymethod;/** *  抽象工厂方法 *  所谓抽象工厂模式就是提供一个接口，用于创建相关或者依赖对象的家族，而不需要明确指定具体类。 *  他允许客户端使用抽象的接口来创建一组相关的产品，而不需要关系实际产出的具体产品是什么。 *  这样一来，客户就可以从具体的产品中被解耦。它的优点是隔离了具体类的生成， *  使得客户端不需要知道什么被创建了，而缺点就在于新增新的行为会比较麻烦，因为当添加一个新的产品对象时，需要更加需要更改接口及其下所有子类。 * *//*******************创建相关的接口*******************//** * 笔杆接口 */interface Penholder {    void getMaterial();}/** * 笔芯接口 */interface Refill {    void load();}/*******************创建相关的实现类*******************/class plastic implements Penholder {    @Override    public void getMaterial() {        System.out.println("我是塑料材质的笔杆");    }}class iron implements Penholder {    @Override    public void getMaterial() {        System.out.println("我是铁材质的笔杆");    }}class PencilLeads implements Refill {    @Override    public void load() {        System.out.println("装载铅笔芯");    }}class InkCartridge implements Refill {    @Override    public void load() {        System.out.println("装载油墨笔芯");    }}/*******************创建工厂接口*******************/interface Factory {    Penholder producePenholder();    Refill produceRefill();}/*******************创建工厂实现类*******************//** * 铅笔 */class PencilFactory implements Factory {    @Override    public Penholder producePenholder() {        return new iron();    }    @Override    public Refill produceRefill() {        return new PencilLeads();    }}/** * 圆珠笔 */class BallpointPenFactory implements Factory {    @Override    public Penholder producePenholder() {        return new plastic();    }    @Override    public Refill produceRefill() {        return new InkCartridge();    }}/** * @author yangqiang */public class AbsFactoryMethod {    public static void main(String[] args) {        // 这里我们创建一支铅笔        Factory pencilFactory = new PencilFactory();        Penholder penholder = pencilFactory.producePenholder();        Refill refill = pencilFactory.produceRefill();        penholder.getMaterial();        refill.load();    }}