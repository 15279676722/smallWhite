package com.example.smallwhite.designpatterns.proxy.V5;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;/** * @author: yangqiang * @create: 2021-03-31 11:27 */public class JdkProxy implements InvocationHandler {    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println("方法"+method.getName()+"被代理了!");        return null;    }    public static <T> T getProxy(Class<T> clazz){        return (T) Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},new JdkProxy());    }}