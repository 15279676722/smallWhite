package com.example.smallwhite.designpatterns.proxy.V3;import sun.misc.ProxyGenerator;import java.io.FileOutputStream;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;/** * 注意Proxy.newProxyInstance()方法接受三个参数： * ClassLoader loader:指定当前目标对象使用的类加载器,获取加载器的方法是固定的 * Class<?>[] interfaces:指定目标对象实现的接口的类型,使用泛型方式确认类型 * InvocationHandler:指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法 * @author: yangqiang * @create: 2021-02-25 22:38 */public class LogHandler implements InvocationHandler {    Object object;    public LogHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(proxy.getClass().getName());        byte[] b = ProxyGenerator.generateProxyClass(proxy.getClass().getSimpleName(), proxy.getClass().getInterfaces());        FileOutputStream out = new FileOutputStream("./" + proxy.getClass().getSimpleName() + ".class");        out.write(b);        out.flush();        out.close();        return method.invoke(object, args);    }    public static MoveAble getProxy(){        return (MoveAble) Proxy.newProxyInstance(Tank.class.getClassLoader(), new Class[]{MoveAble.class}, new LogHandler(new Tank()));    }}