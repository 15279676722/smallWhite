package com.example.smallwhite.designpatterns.factorymethod;/** * 工厂方法模式（FACTORY METHOD） * 工厂方法模式：通过实现类实现相应的方法来决定相应的返回结果,这种方式的可扩展性比较强； * * <p> * 是一种常用的类创建型设计模式,此模式的核心精神是封装类中变化的部分，提取其中个性化善变的部分为独立类， * (接口的多个实现) * 通过依赖注入以达到解耦、复用和方便后期维护拓展的目的。它的核心结构有四个角色，分别是抽象工厂；具体工厂；抽象产品；具体产品 * (通过依赖注入达到解耦 只需要拿到正确的产品进行维护) * 工厂方法(Factory Method)模式的意义是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。 * (接口定义方法。子类实现就可以。具体实现步骤子类来写) * 核心工厂类不再负责产品的创建，这样核心类成为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品。 * (同一个方法有多个不同的实现。可以一直引入新的实现) * 工厂方法模式是简单工厂模式的衍生，解决了许多简单工厂模式的问题。首先完全实现‘开－闭 原则’，实现了可扩展。其次更复杂的层次结构，可以应用于产品结果复杂的场合。 * <p> * 工厂方法模式对简单工厂模式进行了抽象。有一个抽象的Factory类（可以是抽象类和接口），这个类将不再负责具体的产品生产，而是只制定一些规范，具体的生产工作由其子类去完成。在这个模式中，工厂类和产品类往往可以依次对应。即一个抽象工厂对应一个抽象产品，一个具体工厂对应一个具体产品，这个具体的工厂就负责生产对应的产品。 * <p> * 工厂方法模式(Factory Method pattern)是最典型的模板方法模式(Template Method pattern)应用。 * * @author: yangqiang * @create: 2020-12-24 16:09 *//** * 笔类工厂 */interface PenFactory {    /**     * 通过实现这个方法来生成对应的对象 扩展性对比简单工厂模式更强     * @return 返回对象     * */    PenFactory getPen();    /**     *  测试方法     * */    void write();}/** * 圆珠笔工厂 */class BallpointPenFacTory implements PenFactory {    @Override    public PenFactory getPen() {        return new BallpointPenFacTory();    }    @Override    public void write() {        System.out.println("书写:我是圆珠笔!");    }}/** * 铅笔工厂 */class PencilFacTory implements PenFactory {    @Override    public PenFactory getPen() {        return new PencilFacTory();    }    @Override    public void write() {        System.out.println("书写:我是铅笔!");    }}/** * 马克笔工厂 */class MarkerPenFacTory implements PenFactory {    @Override    public PenFactory getPen() {        return new MarkerPenFacTory();    }    @Override    public void write() {        System.out.println("书写:我是马克笔!");    }}/** * @author yangqiang */public class FactoryMethod {    public static void main(String[] args) {        BallpointPenFacTory ballpointPenFacTory = new BallpointPenFacTory();        PenFactory penFactory = ballpointPenFacTory.getPen();        penFactory.write();    }}