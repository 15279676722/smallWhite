package com.example.smallwhite.designpatterns.factorymethod;/** * 简单工厂模式：通过传入相关的类型来确切的返回相应的类,这种方式比较单 一,可扩展性相对较差 * *//** * 笔类接口 */interface Pen {    void write();}/** * 圆珠笔 */class BallpointPen implements Pen {    @Override    public void write() {        System.out.println("书写:我是圆珠笔!");    }}/** * 铅笔 */class Pencil implements Pen {    @Override    public void write() {        System.out.println("书写:我是铅笔!");    }}/** * 马克笔 */class MarkerPen implements Pen {    @Override    public void write() {        System.out.println("书写:我是马克笔!");    }}/** * 创建笔工厂 * */class SimpleFactory {    public Pen getPen(Class clazz) {        Pen pen = null;        try {            pen =(Pen)clazz.newInstance();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }        return pen;    }}/** * @author yangqiang */public class PenWithType {    public static void main(String[] args) {        SimpleFactory simpleFactory = new SimpleFactory();        Pen ballpointPen = simpleFactory.getPen(BallpointPen.class);        ballpointPen.write();        Pen pencil = simpleFactory.getPen(Pencil.class);        pencil.write();        Pen markerPen = simpleFactory.getPen(MarkerPen.class);        markerPen.write();    }}