package com.example.smallwhite.spring.entity;import org.springframework.beans.BeansException;import org.springframework.beans.factory.*;import org.springframework.beans.factory.config.BeanFactoryPostProcessor;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;import org.springframework.beans.factory.support.BeanDefinitionRegistry;import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import javax.annotation.PostConstruct;import javax.annotation.PreDestroy;/** * BeanPostProcessor * * @author: yangqiang * @create: 2021-03-31 14:47 */public class Book implements BeanNameAware,BeanFactoryAware, ApplicationContextAware, InitializingBean, DisposableBean, BeanFactoryPostProcessor, BeanPostProcessor, BeanDefinitionRegistryPostProcessor {    private String bookName;    private String userName;    public Book( ) {        System.out.println("Book Initializing ");    }    public String getBookName() {        return bookName;    }    public void setBookName(String bookName) {        this.bookName = bookName;    }    @Override    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {        System.out.println("Book.setBeanFactory invoke");    }    @Override    public void setBeanName(String name) {        System.out.println("Book.setBeanName invoke");    }    @Override    public void destroy() throws Exception {        System.out.println("Book.destory invoke");    }    @Override    public void afterPropertiesSet() throws Exception {        //实现了InitializingBean接口的bean会调用afterPropertiesSet方法        // 在属性填充操作之后调用        //@PostConstruct 这个注解作用和实现InitializingBean接口作用一样        System.out.println("Book.afterPropertiesSet invoke");    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        System.out.println("Book.setApplicationContext invoke");    }    public void myPostConstruct(){        System.out.println("Book.myPostConstruct invoke");    }    // 自定义初始化方法    @PostConstruct    public void springPostConstruct(){        System.out.println("@PostConstruct");    }    public void myPreDestory(){        System.out.println("Book.myPreDestory invoke");        System.out.println("---------------destroy-----------------");    }    // 自定义销毁方法    @PreDestroy    public void springPreDestory(){        System.out.println("@PreDestory");    }    @Override    protected void finalize() throws Throwable {        System.out.println("------inside finalize-----");    }    @Override    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {        System.out.println("MyBeanFactoryPostProcessor");    }    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {        System.out.println(beanName);        if(bean instanceof Book2){            System.out.println("11");            ((Book2) bean).setId("19961219");            ((Book2) bean).setName("19961219");        }        return bean;    }    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {        System.out.println(beanName);        return bean;    }    @Override    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {        System.out.println("postProcessBeanDefinitionRegistry");    }}