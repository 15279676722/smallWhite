package com.example.smallwhite.utils.mybatis.test;import com.alibaba.druid.util.StringUtils;import lombok.extern.slf4j.Slf4j;import org.apache.ibatis.binding.MapperMethod;import org.apache.ibatis.executor.parameter.ParameterHandler;import org.apache.ibatis.mapping.BoundSql;import org.apache.ibatis.mapping.ParameterMapping;import org.apache.ibatis.plugin.*;import org.apache.ibatis.session.Configuration;import org.springframework.beans.BeanUtils;import org.springframework.util.ClassUtils;import java.beans.PropertyDescriptor;import java.lang.reflect.InvocationTargetException;import java.sql.Time;import java.sql.Timestamp;import java.util.*;import java.lang.reflect.Field;import java.sql.PreparedStatement;import java.util.ArrayList;import java.util.Properties;/** * 测试一个自定义 参数过滤器 * @author: yangqiang * @create: 2021-03-03 15:06 */@Intercepts(        @Signature(type = ParameterHandler.class,method ="setParameters",args = {PreparedStatement.class}))@Slf4jpublic class TestInterceptor implements Interceptor {    private static final Integer PREPARED_STATEMENT_INDEX = 0 ;    private static final Map<String,Object> PARAM_MAP = new HashMap<>();    {        PARAM_MAP.put("dr",0);        PARAM_MAP.put("ts",new Timestamp(System.currentTimeMillis()));        PARAM_MAP.put("createTime",new Timestamp(System.currentTimeMillis()));        PARAM_MAP.put("updateTime",new Timestamp(System.currentTimeMillis()));    }    @Override    public Object intercept(Invocation invocation) throws Throwable {//        log.info("测试一个自定义 参数过滤器");        //拦截 ParameterHandler 的 setParameters 方法 动态设置参数        if (invocation.getTarget() instanceof ParameterHandler) {            return invokeSetParameter(invocation);        }        return null;    }    private Object invokeSetParameter(Invocation invocation) throws Exception {        ParameterHandler parameterHandler = (ParameterHandler) invocation.getTarget();        PreparedStatement ps = (PreparedStatement) invocation.getArgs()[0];        Field configurationField = parameterHandler.getClass().getDeclaredField("configuration");        configurationField.setAccessible(true);        Configuration configuration = (Configuration) configurationField.get(parameterHandler);        // 反射获取 BoundSql 对象，此对象包含生成的sql和sql的参数map映射        Field boundSqlField = parameterHandler.getClass().getDeclaredField("boundSql");        boundSqlField.setAccessible(true);        BoundSql boundSql = (BoundSql) boundSqlField.get(parameterHandler);        boundSql = processBoundSql(boundSql,configuration);        List<String> paramNames = new ArrayList<>();        // 若参数映射没有包含的key直接返回//        boolean hasKey = hasParamKey(paramNames, boundSql.getParameterMappings());//        if (!hasKey) {//            return invocation.proceed();//        }        // 反射获取 参数对像        Field parameterField = parameterHandler.getClass().getDeclaredField("parameterObject");        parameterField.setAccessible(true);        Object parameterObject = parameterField.get(parameterHandler);        // 改写参数        parameterObject = processSingle(parameterObject, paramNames);        // 改写的参数设置到原parameterHandler对象        parameterField.set(parameterHandler, parameterObject);//        parameterHandler.setParameters(ps);        return invocation.proceed();    }    private BoundSql processBoundSql(BoundSql boundSql, Configuration configuration) {        String sql = boundSql.getSql();        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();        BoundSql newBoundSql = null;        //新增操作        if(sql.startsWith("insert") || sql.startsWith("INSERT")){            String keySql = PARAM_MAP.keySet().toString().replace("]", "").replace("[","");            Integer size = PARAM_MAP.keySet().size();            String valueSql = "";            for (int i = 0; i < size; i++) {                valueSql += "?,";            }            sql = sql.replaceFirst("\\)", ","+keySql + ")");            sql = sql.replaceFirst("\\?\\)",valueSql+"?)");            parameterMappings.add(new ParameterMapping.Builder(configuration,"dr",Integer.class).build());            parameterMappings.add(new ParameterMapping.Builder(configuration,"ts", Timestamp.class).build());            parameterMappings.add(new ParameterMapping.Builder(configuration,"createTime",Timestamp.class).build());            parameterMappings.add(new ParameterMapping.Builder(configuration,"updateTime",Timestamp.class).build());            newBoundSql = new BoundSql(configuration,sql,parameterMappings,boundSql.getParameterObject());        }        return newBoundSql;    }    /**     * 判断已生成sql参数映射中是否包含tenantId     * *///    private boolean hasParamKey(List<String> paramNames, List<ParameterMapping> parameterMappings) {//        boolean hasKey = false;//        for (ParameterMapping parameterMapping : parameterMappings) {//            if (StringUtils.equals(parameterMapping.getProperty(), PARAM_KEY)) {//                hasKey = true;//            } else {//                paramNames.add(parameterMapping.getProperty());//            }//        }//        return hasKey;//    }    private Object processSingle(Object paramObj, List<String> paramNames) throws Exception {        Map<String, Object> paramMap = new MapperMethod.ParamMap<>();        if (paramObj == null) {            paramMap.putAll(PARAM_MAP);            paramObj = paramMap;            // 单参数 将 参数转为 map        } else if (ClassUtils.isPrimitiveOrWrapper(paramObj.getClass())                || String.class.isAssignableFrom(paramObj.getClass())                || Number.class.isAssignableFrom(paramObj.getClass())) {            if (paramNames.size() == 1) {                paramMap.put(paramNames.iterator().next(), paramObj);                paramMap.putAll(PARAM_MAP);                paramObj = paramMap;            }        } else {            processParam(paramObj);        }        return paramObj;    }    private void processParam(Object parameterObject) throws IllegalAccessException, InvocationTargetException {        // 处理参数对象  如果是 map 且map的key 中没有 tenantId，添加到参数map中        // 如果参数是bean，反射设置值        if (parameterObject instanceof Map) {            PARAM_MAP.forEach((key,value)->{                ((Map) parameterObject).putIfAbsent(key, value);            });        } else {            PARAM_MAP.forEach((key,value)->{                PropertyDescriptor ps = BeanUtils.getPropertyDescriptor(parameterObject.getClass(), key);                if (ps != null && ps.getReadMethod() != null && ps.getWriteMethod() != null) {                    Object newValue = null;                    try {                        newValue = ps.getReadMethod().invoke(parameterObject);                        if (newValue == null) {                            ps.getWriteMethod().invoke(parameterObject, value);                        }                    } catch (IllegalAccessException e) {                        e.printStackTrace();                    } catch (InvocationTargetException e) {                        e.printStackTrace();                    }                }            });        }    }    @Override    public Object plugin(Object target) {        return Plugin.wrap(target,this);    }    @Override    public void setProperties(Properties properties) {    }}