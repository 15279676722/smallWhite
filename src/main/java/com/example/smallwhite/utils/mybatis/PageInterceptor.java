package com.example.smallwhite.utils.mybatis;import com.google.common.base.Joiner;import lombok.extern.slf4j.Slf4j;import org.apache.ibatis.executor.Executor;import org.apache.ibatis.mapping.BoundSql;import org.apache.ibatis.mapping.MappedStatement;import org.apache.ibatis.plugin.*;import org.apache.ibatis.session.ResultHandler;import org.apache.ibatis.session.RowBounds;import java.util.Properties;/** * @author: yangqiang * @create: 2021-01-19 15:09 */@Slf4j@Intercepts({//        @Signature(type = Executor.class,method = org.apache.ibatis.executor.Executo中定义的方法，参数也要对应,args={MapperStatement.class,Object.class}        @Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})public class PageInterceptor implements Interceptor {    //对应上面args的序号    private static final Integer MAPPED_STATEMENT_INDEX = 0 ;    private static final Integer PARAMTER_INDEX = 1;    private static final Integer ROWBOUNDS_INDEX = 2;    private static final Integer RESULT_HANDLER_INDEX = 3;    @Override    public Object intercept(Invocation invocation) throws Throwable {        //从invocation 获取参数        Object[] queryArgs = invocation.getArgs();        MappedStatement ms =  (MappedStatement)queryArgs[MAPPED_STATEMENT_INDEX];        Object parameter = queryArgs[PARAMTER_INDEX];        Page page = PageUtil.getPaingParam();        if(page != null){            //重新构造新的sql select * from ** where  limit * *            BoundSql boundSql = ms.getBoundSql(parameter);            String pagingSql = getPagingSql(boundSql.getSql(), page.getOffset(), page.getLimit());            BoundSql newBoundSql = new BoundSql(ms.getConfiguration(), pagingSql, boundSql.getParameterMappings(), boundSql.getParameterObject());            queryArgs[MAPPED_STATEMENT_INDEX] = newMappedStatement(ms,newBoundSql);            //重置RowBounds            queryArgs[ROWBOUNDS_INDEX] = new RowBounds(RowBounds.NO_ROW_OFFSET, RowBounds.NO_ROW_LIMIT);        }        log.info("自定义分页插件执行");        Object result = invocation.proceed();        PageUtil.removePagingParam();        return result;    }    public String getPagingSql(String sql, int offset, int limit) {        StringBuilder result = new StringBuilder(sql.length() + 100);        result.append(sql).append(" limit ");        if (offset > 0) {            result.append(offset).append(",").append(limit);        }else{            result.append(limit);        }        return result.toString();    }    /**     * 重新构建 MappedStatement     * 把修改后的 BoundSql覆盖原有的 BoundSql     * @param ms     * @param newBoundSql     * @return     */    private MappedStatement newMappedStatement(MappedStatement ms, BoundSql newBoundSql) {        MappedStatement.Builder builder = new MappedStatement.Builder(ms.getConfiguration(), ms.getId(),                new BoundSqlSqlSource(newBoundSql), ms.getSqlCommandType());        builder.keyColumn(delimitedArrayToString(ms.getKeyColumns()));        builder.keyGenerator(ms.getKeyGenerator());        builder.keyProperty(delimitedArrayToString(ms.getKeyProperties()));        builder.lang(ms.getLang());        builder.resource(ms.getResource());        builder.parameterMap(ms.getParameterMap());        builder.resultMaps(ms.getResultMaps());        builder.resultOrdered(ms.isResultOrdered());        builder.resultSets(delimitedArrayToString(ms.getResultSets()));        builder.resultSetType(ms.getResultSetType());        builder.timeout(ms.getTimeout());        builder.statementType(ms.getStatementType());        builder.useCache(ms.isUseCache());        builder.cache(ms.getCache());        builder.databaseId(ms.getDatabaseId());        builder.fetchSize(ms.getFetchSize());        builder.flushCacheRequired(ms.isFlushCacheRequired());        return builder.build();    }    public String delimitedArrayToString(String[] array) {        if (array == null || array.length == 0) {            return "";        }        Joiner joiner = Joiner.on(",");        return joiner.join(array);    }    @Override    public Object plugin(Object target) {        return Plugin.wrap(target,this);    }    @Override    public void setProperties(Properties properties) {    }}