package com.example.smallwhite.utils;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeansException;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.BeanFactoryAware;import org.springframework.beans.factory.BeanNameAware;import org.springframework.beans.factory.InitializingBean;import org.springframework.beans.factory.config.BeanDefinition;import org.springframework.beans.factory.config.BeanFactoryPostProcessor;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.stereotype.Component;/** * @author: yangqiang * @create: 2020-10-14 16:36 */@Data@Slf4j@Component("SpringContextUtil")public class SpringContextUtil implements ApplicationContextAware, BeanNameAware, BeanFactoryAware, BeanPostProcessor, InitializingBean, BeanFactoryPostProcessor {    private String beanName;    private BeanFactory beanFactory;    /**     * 用于保存接口实现类名及对应的类     */    private static ApplicationContext applicationContext;    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {//        log.info("实现了ApplicationContextAware 接口");        SpringContextUtil.applicationContext = applicationContext;    }    /**     * 获取该接口的所有实现     * */    public  static <T> Object getBeansOfType(Class<T> clazz){        return getApplicationContext().getBeansOfType(clazz);    }    /**     * 获取applicationContext     */    public static ApplicationContext getApplicationContext() {        return applicationContext;    }    /**     * 通过name获取 Bean.     */    public static Object getBean(String name) {        return getApplicationContext().getBean(name);    }    /**     * 通过class获取Bean.     */    public static <T> T getBean(Class<T> clazz) {        return getApplicationContext().getBean(clazz);    }    /**     * 通过name,以及Clazz返回指定的Bean     */    public static <T> T getBean(String name, Class<T> clazz) {        return getApplicationContext().getBean(name, clazz);    }    @Override    public void setBeanName(String name) {//        log.info("实现了BeanFactory 接口");        this.beanName = name;    }    @Override    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {//        log.info("实现了BeanNameAware 接口");        this.beanFactory = beanFactory;    }    @Override    public void afterPropertiesSet() {//        log.info("实现了InitializingBean 接口");    }    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {//        log.info("实现了BeanPostProcessor 接口，调用postProcessBeforeInitialization方法{}",bean.getClass().getName());        if(bean instanceof SpringContextUtil){            log.info("获取到了SpringContextUtil");//            SpringContextUtil springContextUtil = (SpringContextUtil) bean;//            springContextUtil.setBeanName("testBeanName");//            return springContextUtil;        }        return bean;    }    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {//        log.info("实现了BeanPostProcessor 接口，调用postProcessAfterInitialization方法{}",bean.getClass().getName());        if(bean instanceof SpringContextUtil){            SpringContextUtil springContextUtil = (SpringContextUtil) bean;            springContextUtil.setBeanName("testBeanName");            return springContextUtil;        }        return bean;    }    @Override    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {        BeanDefinition jdbcUtil = beanFactory.getBeanDefinition("jdbcUtil");    }}