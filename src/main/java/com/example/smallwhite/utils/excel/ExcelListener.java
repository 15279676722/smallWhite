package com.example.smallwhite.utils.excel;import com.alibaba.excel.context.AnalysisContext;import com.alibaba.excel.event.AnalysisEventListener;import com.example.smallwhite.utils.excel.service.DownloadService;import lombok.extern.slf4j.Slf4j;import java.util.ArrayList;import java.util.List;/** * * @author: yangqiang * @create: 2020-09-14 10:31 */@Slf4jpublic class  ExcelListener<T> extends AnalysisEventListener<T> {    private DownloadService  service;    /**     * 每隔100条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收     */    private static final int BATCH_COUNT = 100;    private static  Integer SUM_COUNT =0 ;    List<T> list = new ArrayList<>();    public ExcelListener(DownloadService service) {        this.service = service;    }    /**     * 这个每一条数据解析都会来调用     *     * @param t     *            one row value. Is is same as {@link AnalysisContext#readRowHolder()}     * @param analysisContext     */    @Override    public void invoke(T t, AnalysisContext analysisContext) {        list.add(t);        SUM_COUNT++;        if(list.size() >= BATCH_COUNT){            saveData();            list.clear();        }    }    /**     * 加上存储数据库     */    private void saveData()  {        if(list.size() == 0 ){            return;        }        service.excelInsert(list);//        log.info("{}条数据，开始存储数据库！", list.size());//        try {//            Method excelInsert = service.getClass().getMethod("excelInsert", List.class);//            excelInsert.invoke(service, list);//        } catch (IllegalAccessException e) {//            e.printStackTrace();//        } catch (InvocationTargetException e) {//            e.printStackTrace();//        } catch (NoSuchMethodException e) {//            e.printStackTrace();//            log.error("impl层没有excelInsert方法请添加");//        }        log.info("存储数据库成功！");    }    /**     * 所有数据解析完成了 都会来调用     *     * @param analysisContext     */    @Override    public void doAfterAllAnalysed(AnalysisContext analysisContext) {        saveData();        log.info("解析完毕,共{}条数据",SUM_COUNT);        SUM_COUNT=0;        list.clear();    }}