package com.example.smallwhite.cas;import java.util.concurrent.Executor;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.atomic.AtomicInteger;/** * @author: yangqiang * @create: 2021-03-16 18:53 */public class ThreadTest {    public static void main(String[] args) throws InterruptedException {        for (int j = 0; j < 10; j++) {            Long startMs = System.currentTimeMillis();            Integer[] num = {0};            ExecutorService executorService = Executors.newFixedThreadPool(100);            for (int i = 0; i < 100; i++) {                executorService.execute(new Runnable() {                    @Override                    public void run() {                        for (int j = 0; j < 100; j++) {                            num[0]++;                        }                    }                });            }            executorService.shutdown();            System.out.println(System.currentTimeMillis()-startMs+"耗时");            Thread.sleep(10);            System.out.println(num[0]);        }    }    class MyThread implements Runnable{        private volatile int value;        @Override        public void run() {            value ++ ;        }    }}