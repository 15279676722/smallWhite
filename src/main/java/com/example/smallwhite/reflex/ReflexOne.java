package com.example.smallwhite.reflex;import org.aspectj.apache.bcel.classfile.Modifiers;import java.lang.reflect.*;import java.util.Arrays;/** * @author: yangqiang * @create: 2021-03-29 14:34 */public class ReflexOne {    public static void main(String[] args) {        Test test = new Test();        Class aClass = test.getClass();        //获得所有的构造方法 包含private修饰的        Constructor[] declaredConstructors = aClass.getDeclaredConstructors();        //获得所有的public的构造方法        //JAVA 反射机制中，Field的getModifiers()方法返回int类型值表示该字段的修饰符。        //        //其中，该修饰符是java.lang.reflect.Modifier的静态属性。        //        //对应表如下：        //        //PUBLIC: 1        //PRIVATE: 2        //PROTECTED: 4        //STATIC: 8        //FINAL: 16        //SYNCHRONIZED: 32        //VOLATILE: 64        //TRANSIENT: 128        //NATIVE: 256        //INTERFACE: 512        //ABSTRACT: 1024        //STRICT: 2048        Constructor[] constructors = aClass.getConstructors();        Arrays.asList(declaredConstructors).forEach(item -> {            System.out.print(Modifier.toString(item.getModifiers()) + "参数：");            Class[] parameterTypes = item.getParameterTypes();            Arrays.asList(parameterTypes).forEach(paramItem -> {                System.out.print(paramItem.getName());            });            System.out.println("");        });        //根据参数类型获取构造函数        Constructor declaredConstructor = null;        try {            declaredConstructor = aClass.getDeclaredConstructor(int.class, String.class);        } catch (NoSuchMethodException e) {            e.printStackTrace();        }        Test test2 = null;        try {            test2 = (Test) declaredConstructor.newInstance(18, "yangqiang");        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        System.out.println(test2.toString());        //调用私有构造方法        Constructor declaredConstructor2 = null;        try {            declaredConstructor2 = aClass.getDeclaredConstructor(String.class);        } catch (NoSuchMethodException e) {            e.printStackTrace();        }        try {            declaredConstructor2.setAccessible(true);            Test test3 = (Test) declaredConstructor2.newInstance("yangqiang");            System.out.println(test3.toString());        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        //调用私有方法        try {            Method welcome = aClass.getDeclaredMethod("welcome", String.class);            welcome.setAccessible(true);            //invoke 方法执行类的方法 需要将类的一个实例和需要的参数传入            String returnWelcome = (String) welcome.invoke(test,"yangqiang");            System.out.println(returnWelcome);        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        //获取类的私有字段并且赋值 不需要通过setName getName        Field name = null;        try {            name = aClass.getDeclaredField("name");            name.setAccessible(true);            name.set(test,"yangqiang");            System.out.println(test.getName());        } catch (NoSuchFieldException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }    }}