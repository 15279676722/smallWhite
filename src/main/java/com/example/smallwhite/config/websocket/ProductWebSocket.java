package com.example.smallwhite.config.websocket;/** * @author: yangqiang * @create: 2020-06-16 19:20 */import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Component;import javax.websocket.*;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.concurrent.CopyOnWriteArraySet;import java.util.concurrent.atomic.AtomicInteger;/** * @Author：JCccc * @Description： * @Date： created in 15:56 2019/5/13 */@Slf4j@Component@ServerEndpoint(value = "/productWebSocket/{userId}", configurator = MyEndpointConfigure.class,encoders = ServerEncoder.class)public class ProductWebSocket {    /**     * 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。     * */    private static final AtomicInteger OnlineCount = new AtomicInteger(0);    /**     * concurrent包的线程安全Set，用来存放每个客户端对应的ProductWebSocket对象。     * */    private static CopyOnWriteArraySet<ProductWebSocket> webSocketSet = new CopyOnWriteArraySet<ProductWebSocket>();    /**     * 与某个客户端的连接会话，需要通过它来给客户端发送数据     * */    private Session session;    /**     * 连接建立成功调用的方法     */    @OnOpen    public void onOpen(@PathParam("userId")String userId, Session session) {        log.info("新客户端连入，用户id：" + userId);        this.session = session;        // 加入set中        webSocketSet.add(this);        // 在线数加1        addOnlineCount();        if(userId!=null) {            List<String> totalPushMsgs = new ArrayList<String>();            totalPushMsgs.add(userId+"连接成功-"+"-当前在线人数为："+getOnlineCount());            if(totalPushMsgs != null && !totalPushMsgs.isEmpty()) {                totalPushMsgs.forEach(e -> sendMessage(e));            }        }    }    /**     * 连接关闭调用的方法     */    @OnClose    public void onClose() {        log.info("一个客户端关闭连接");        // 从set中删除        webSocketSet.remove(this);        // 在线数减1        subOnlineCount();    }    /**     * 收到客户端消息后调用的方法     *     * @param message     *            客户端发送过来的消息     */    @OnMessage    public void onMessage(String message, Session session) {        log.info("用户发送过来的消息为："+message);    }    /**     * 发生错误时调用     */    @OnError    public void onError(Session session, Throwable error) {        log.error("websocket出现错误");        error.printStackTrace();    }    public void sendMessage(String message) {        try {            this.session.getBasicRemote().sendText(message);            log.info("推送消息成功，消息为：" + message);        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 群发自定义消息     */    public static void sendInfo(String message) throws IOException {        for (ProductWebSocket productWebSocket : webSocketSet) {            productWebSocket.sendMessage(message);        }    }    public static synchronized int getOnlineCount() {        return OnlineCount.get();    }    public static synchronized void addOnlineCount() {        OnlineCount.incrementAndGet(); // 在线数+1    }    public static synchronized void subOnlineCount() {        OnlineCount.decrementAndGet(); // 在线数-1    }}