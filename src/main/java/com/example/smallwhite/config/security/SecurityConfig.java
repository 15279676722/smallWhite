//package com.example.config.security;////import com.fasterxml.jackson.databind.ObjectMapper;//import org.springframework.beans.factory.annotation.Autowired;//import org.springframework.context.annotation.Bean;//import org.springframework.context.annotation.Configuration;////import org.springframework.security.authentication.InsufficientAuthenticationException;//import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;//import org.springframework.security.config.annotation.web.builders.HttpSecurity;//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;//import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;//import org.springframework.security.core.Authentication;//import org.springframework.security.core.AuthenticationException;//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;//import org.springframework.security.crypto.password.PasswordEncoder;//import org.springframework.security.web.AuthenticationEntryPoint;//import org.springframework.security.web.authentication.AuthenticationSuccessHandler;//import org.springframework.security.web.savedrequest.HttpSessionRequestCache;//import org.springframework.security.web.savedrequest.RequestCache;//import org.springframework.security.web.savedrequest.SavedRequest;////import javax.servlet.ServletException;//import javax.servlet.http.HttpServletRequest;//import javax.servlet.http.HttpServletResponse;//import java.io.IOException;//import java.io.PrintWriter;/////**// * Security配置// * @author: yangqiang// * @create: 2020-09-21 16:31// *///@Configuration//@EnableWebSecurity//public class SecurityConfig extends WebSecurityConfigurerAdapter {//    @Autowired//    MyAuthenticationSuccessHandler successHandler;//    @Override//    protected void configure(AuthenticationManagerBuilder auth) throws Exception {//        auth//                .inMemoryAuthentication()//                .withUser("yangqiang")//                .roles("admin")//                .password("$2a$10$7XQBetv/leAZzJrFiMq8mu.mwqYvM4DaEIhwq2LbsgWK9Sn.3WzA6")//                .and()//                .withUser("srj")//                .roles("user")//                .password("$2a$10$7XQBetv/leAZzJrFiMq8mu.mwqYvM4DaEIhwq2LbsgWK9Sn.3WzA6");//    }////    @Override//    protected void configure(HttpSecurity http) throws Exception {//        http//                //开启登录配置//                .authorizeRequests()//                //在访问我们的loginURL,我们是不需要身份认证，可以立即访问//                .antMatchers("/login.html" ,"/doLogin","/FlexAlbum.html").permitAll()//                // RedissionLock接口需要 admin权限才可以访问//                .antMatchers("/RedissionLock").hasRole("admin")//                //表示剩余的其他接口，登录之后就能访问//                .anyRequest().authenticated()//                .and()//                .formLogin()//                .loginPage("/login.html")//                .usernameParameter("Username").passwordParameter("Password")//                .loginProcessingUrl("/RedissionLock")//                .successHandler((request,response,authentication)-> {//                        response.setContentType("application/json;charset=utf-8");//                        RequestCache cache = new HttpSessionRequestCache();//                        SavedRequest savedRequest = cache.getRequest(request, response);//                        String url = savedRequest.getRedirectUrl();//                        response.sendRedirect(url);//                })////                .loginProcessingUrl("/doLogin")//                .and()//                //请求授权//                .authorizeRequests()////        ;//////                //登录处理接口//    }//////    @Bean//    public PasswordEncoder passwordEncoder(){//        return new BCryptPasswordEncoder();//    }//    /**//     * 加密方法//     * */////    public static void main(String[] args) {////        String pass = "root";////        BCryptPasswordEncoder bcryptPasswordEncoder = new BCryptPasswordEncoder();////        String hashPass = bcryptPasswordEncoder.encode(pass);////        System.out.println(hashPass);////////        boolean f = bcryptPasswordEncoder.matches("root",hashPass);////        System.out.println(f);////    }//}