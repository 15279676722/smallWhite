package com.example.smallwhite.config;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.annotation.Configuration;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * @author: yangqiang * @create: 2021-03-06 17:01 */@Componentpublic class UrlInterceptor implements HandlerInterceptor {    private static final Logger logger = LoggerFactory.getLogger(UrlInterceptor.class);    private static final String GET_ALL = "getAll";    private static final String GET_HEADER = "getHeader";    /**     * 进入Controller层之前拦截请求，默认是拦截所有请求     * @param httpServletRequest request     * @param httpServletResponse response     * @param o object     * @return 是否拦截当前请求，true表示拦截当前请求，false表示不拦截当前请求     * @throws Exception 可能出现的异常     */    @Override    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {        logger.info("go into preHandle method ... ");        String requestURI = httpServletRequest.getRequestURI();        if (requestURI.contains(GET_ALL)) {            return true;        }        if (requestURI.contains(GET_HEADER)) {            httpServletResponse.sendRedirect("/user/redirect");        }        return true;    }    /**     * 处理完请求后但还未渲染试图之前进行的操作     * @param httpServletRequest request     * @param httpServletResponse response     * @param o object     * @param modelAndView mv     * @throws Exception E     */    @Override    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {        logger.info("go into postHandle ... ");    }    /**     * 视图渲染后但还未返回到客户端时的操作     * @param httpServletRequest request     * @param httpServletResponse response     * @param o object     * @param e exception     * @throws Exception     */    @Override    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {        logger.info("go into afterCompletion ... ");    }}