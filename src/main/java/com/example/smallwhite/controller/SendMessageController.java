package com.example.smallwhite.controller;import com.example.smallwhite.utils.ResultData;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.HashMap;import java.util.Map;import java.util.UUID;/** * RabbitMq发送消息 * @author: yangqiang * @create: 2020-10-14 10:06 */@RestControllerpublic class SendMessageController {    /**     * 使用RabbitTemplate,这提供了接收/发送等等方法     */    @Autowired    RabbitTemplate rabbitTemplate;    /**     * 直连型交换机发送信息     */    @GetMapping("/sendDirectMessage")    public ResultData sendDirectMessage() {        String messageId = String.valueOf(UUID.randomUUID());        String messageData = "test message, hello!";        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));        Map<String, Object> map = new HashMap<>();        map.put("messageId", messageId);        map.put("messageData", messageData);        map.put("createTime", createTime);        //将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange        rabbitTemplate.convertAndSend("TestDirectExchange", "TestDirectRouting", map);        return ResultData.ok();    }    /**     * 直连型交换机发送信息     * 测试死信队列 生产者产生100次数据全部放入死信队列     */    @GetMapping("/sendDirectMessage2")    public ResultData sendDirectMessage2() {        String messageId = String.valueOf(UUID.randomUUID());        String messageData = "test message, hello!";        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));        Map<String, Object> map = new HashMap<>();        map.put("messageId", messageId);        map.put("messageData", messageData);        map.put("createTime", createTime);        for (int i = 0; i < 10; i++) {            //将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange            rabbitTemplate.convertAndSend("TestDirectExchange", "TestDirectRouting2", map);        }        return ResultData.ok();    }    /**     * 主题式交换机发送信息     */    @GetMapping("/sendTopicMessage1")    public ResultData sendTopicMessage1() {        String messageId = String.valueOf(UUID.randomUUID());        String messageData = "message: M A N ";        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));        Map<String, Object> manMap = new HashMap<>();        manMap.put("messageId", messageId);        manMap.put("messageData", messageData);        manMap.put("createTime", createTime);        rabbitTemplate.convertAndSend("topicExchange", "topic.man", manMap);        return ResultData.ok();    }    @GetMapping("/sendTopicMessage2")    public ResultData sendTopicMessage2() {        String messageId = String.valueOf(UUID.randomUUID());        String messageData = "message: woman is all ";        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));        Map<String, Object> womanMap = new HashMap<>();        womanMap.put("messageId", messageId);        womanMap.put("messageData", messageData);        womanMap.put("createTime", createTime);        rabbitTemplate.convertAndSend("topicExchange", "topic.woman", womanMap);        return ResultData.ok();    }    /**     * 扇形交换机发送消息     * */    @GetMapping("/sendFanoutMessage")    public ResultData sendFanoutMessage() {        String messageId = String.valueOf(UUID.randomUUID());        String messageData = "message: testFanoutMessage ";        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));        Map<String, Object> map = new HashMap<>();        map.put("messageId", messageId);        map.put("messageData", messageData);        map.put("createTime", createTime);        rabbitTemplate.convertAndSend("fanoutExchange", null, map);        return ResultData.ok();    }    /**     * 测试消息回调 不存在的交换机类型     * */    @GetMapping("/TestMessageAck")    public ResultData TestMessageAck() {        String messageId = String.valueOf(UUID.randomUUID());        String messageData = "message: non-existent-exchange test message ";        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));        Map<String, Object> map = new HashMap<>();        map.put("messageId", messageId);        map.put("messageData", messageData);        map.put("createTime", createTime);        rabbitTemplate.convertAndSend("non-existent-exchange", "TestDirectRouting", map);        return ResultData.ok();    }    /**     * 测试消息回调 不给这个交换机绑定任何队列     * 测试找到交换机找不到队列     * */    @GetMapping("/TestMessageAck2")    public ResultData TestMessageAck2() {        String messageId = String.valueOf(UUID.randomUUID());        String messageData = "message: lonelyDirectExchange test message ";        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));        Map<String, Object> map = new HashMap<>();        map.put("messageId", messageId);        map.put("messageData", messageData);        map.put("createTime", createTime);        rabbitTemplate.convertAndSend("lonelyDirectExchange", "TestDirectRouting", map);        return ResultData.ok();    }}